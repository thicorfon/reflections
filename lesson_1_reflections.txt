How did viewing a diff between two versions of a file help you see the bug that was introduces?

I didn't have to search every line to spot the differences. 
I also knew that the code was working before it was edited, so I knew the problem had to be something that 


How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

It makes me a more efficient programmer because I can, at any point, go back to as older version.
This way, it's easier to spot the differences and, if any bug occurs, you can narrow your search.


What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Pros:
If you do it correctly, you won't be committing too often or too rarely.
You can commit everytime you make a logical change, and that's something hard for a computer algorithm detect

Cons:
You can forget to commit


Why do you think some version control systems, like Git, allow saving multiple files Becain one commit, while others, like Google Docs, treat each file separately?

Because they have different purposes.
When coding, you often need to change multiple files at the same time for your code to work, while using Google Docs, you're only editing just one file at a time.

 
How can you use the commands git log and git diff to view the history of files?

With git log, I can see all the commits that have been made. Then, I can use git diff to see the differences between those commits.


How might using version control make you more confident to make changes that could break something?
Now that you have your workspace set up, what do you want to try using Git for?

Knowing that I can checkout on an older version of my code, makes it safer to make changes, not caring too much if it will work.


Now that you have your workspace set up, what do you want to try using Git for?

I would like to use it in a real project


